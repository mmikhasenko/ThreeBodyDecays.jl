var documenterSearchIndex = {"docs":
[{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"EditURL = \"11-canonical.jl\"","category":"page"},{"location":"11-canonical/#Canonical-formalism","page":"Canonical formalism","title":"Canonical formalism","text":"","category":"section"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"This is an advanced tutorial that preserves an exercises performed while investigating different formalisms. This notebook demonstrates the equivalence of the canonical formulation of the decay to the helicity formalism with LS couplings, for a single chain","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"using Markdown\nusing InteractiveUtils\nusing Random\nRandom.seed!(1212);\nnothing #hide","category":"page"},{"location":"11-canonical/#Implementation","page":"Canonical formalism","title":"Implementation","text":"","category":"section"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"using ThreeBodyDecays\nusing ThreeBodyDecays.Parameters\nusing ThreeBodyDecays.PartialWaveFunctions","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"The CC function calculates the Clebsch-Gordan coefficients for the given quantum numbers.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"function CC(two_m12t, two_j12t, two_ls)\n    two_j1, two_j2, two_j = two_j12t\n    two_m1, two_m2, two_mj = two_m12t\n    two_l, two_s = two_ls\n\n    two_ms = two_m1 + two_m2\n    two_ml = two_mj - two_ms\n\n    clebschgordan_doublearg(two_j1, two_m1, two_j2, two_m2, two_s, two_ms) *\n    clebschgordan_doublearg(two_l, two_ml, two_s, two_ms, two_j, two_mj)\nend;\nnothing #hide","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"The Y_lm_doublearg function calculates the spherical harmonics for the given quantum numbers and angles.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"Y_lm_doublearg(two_l, two_m, ϕ, cosθ) =\n    sqrt((two_l + 1) / (4π)) * conj(wignerD_doublearg(two_l, two_m, 0, ϕ, cosθ, 0));\nnothing #hide","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"The A_node_canonical function calculates the amplitude for a node in the canonical formalism.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"function A_node_canonical(angles, two_m12t, two_j12t, two_ls)\n    two_m1, two_m2, two_mj = two_m12t\n    two_ms = two_m1 + two_m2\n    two_ml = two_mj - two_ms\n    two_l, _ = two_ls\n    @unpack ϕ, cosθ = angles\n\n    return CC(two_m12t, two_j12t, two_ls) *\n           Y_lm_doublearg(two_l, two_ml, ϕ, cosθ) *\n           sqrt(4π)\nend;\nnothing #hide","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"The A_canonical function calculates the amplitude for the entire decay chain in the canonical formalism.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"function A_canonical(chain, angles, two_ms)\n    @unpack Hij, HRk = chain\n    two_LS = HRk.two_ls\n    two_ls = Hij.two_ls\n    @unpack angles_Hij, angles_HRk = angles\n\n    @unpack k = chain\n    i, j = ij_from_k(k)\n\n    @unpack two_js = chain.tbs\n    two_ji, two_jj, two_jk, two_j0 = two_js[i], two_js[j], two_js[k], two_js[4]\n    two_mi, two_mj, two_mk, two_m0 = two_ms[i], two_ms[j], two_ms[k], two_ms[4]\n\n    @unpack two_j = chain\n    value = sum(-two_j:2:two_j) do two_m\n        A_node_canonical(angles_HRk, (two_m, two_mk, two_m0), (two_j, two_jk, two_j0), two_LS) * A_node_canonical(\n            angles_Hij,\n            (two_mi, two_mj, two_m),\n            (two_ji, two_jj, two_j),\n            two_ls,\n        )\n    end\n\n    matching = 1 / sqrt(two_j0 + 1) # ThreeBodyDecays implementation does not have sqrt(two_j0+1) factor\n    return value * matching\nend;\nnothing #hide","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"The unpolarized_intensity_canonical function calculates the unpolarized intensity for the canonical formalism.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"unpolarized_intensity_canonical(chain, angles) =\n    sum(itr(chain.tbs.two_js)) do two_ms\n        A = A_canonical(chain, angles, two_ms)\n        abs2(A)\n    end;\nnothing #hide","category":"page"},{"location":"11-canonical/#Example","page":"Canonical formalism","title":"Example","text":"","category":"section"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"In this example, we use a decay process, 0 → 1 2 3 with spins 3/2 → 1/2 1 0, respectively. A decay chain (23)1 with jp=2- permit 8 different helicity couplings. The equivalent between formalism is checked separately for each of them.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"Create a three-body system with specified masses and spins.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"tbs = ThreeBodySystem(\n    ThreeBodyMasses(1, 2, 3; m0 = 6.32397),\n    ThreeBodySpins(1, 2, 0; two_h0 = 3),\n);\nnothing #hide","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"Define a decay chain with LS couplings.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"decay_chains = DecayChainsLS(;\n    k = 1,\n    Xlineshape = x -> 1.0,\n    jp = jp\"2-\",\n    Ps = ThreeBodyParities('+', '+', '+'; P0 = '+'), # need parities\n    tbs,\n); # give three-body-system structure\nnothing #hide","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"Generate a random point in the phase space.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"dpp = randomPoint(tbs);\n(masses = dpp.σs, spin_projections = dpp.two_λs)","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"Define the angles for the decay. Here, there is something cool 🔥: for canonical formulation, RBR⁻¹ is applied when going to a subchannel rest frame. Hence, the θij is that is passed to Ylm is actually the sum of both polar helicity angle, θRk and θij. Going over π might be subtle.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"angles = let\n    cosθ_Rh = 0.7\n    cosθ_ij = cos(acos(cosθ_Rh) + acos(cosθ23(dpp.σs, tbs.ms^2)))\n\n    angles_HRk = (ϕ = 0.3, cosθ = cosθ_Rh) # ϕ is arbitrary\n    angles_Hij = (ϕ = 0.5, cosθ = cosθ_ij) # ϕ is arbitrary\n    (; angles_Hij, angles_HRk)\nend","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"Calculate and compare the unpolarized intensities.","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"let\n    Ic = [unpolarized_intensity_canonical(dc, angles) for dc in decay_chains]\n    Ih = [unpolarized_intensity(dc, dpp.σs) for dc in decay_chains]\n    Ic ./ Ih\nend","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"","category":"page"},{"location":"11-canonical/","page":"Canonical formalism","title":"Canonical formalism","text":"This page was generated using Literate.jl.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"EditURL = \"10-tutorial.jl\"","category":"page"},{"location":"10-tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"This tutorial guides the user through the basic example of building a model for a cascade decay of a particle into three particles. The chosen example is the decay of Λb ⟶ Jψ p K, where the pentaquarks candidates has been seen for the first time in 2015. The tutorial shows how to build a decay chain object, and how to calculate the amplitude, the matrix element of the transition.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"using ThreeBodyDecays # import the module\nusing Plots\nusing QuadGK","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"theme(\n    :wong,\n    frame = :box,\n    lab = \"\",\n    minorticks = true,\n    guidefontvalign = :top,\n    guidefonthalign = :right,\n    xlim = (:auto, :auto),\n    ylim = (:auto, :auto),\n    grid = false,\n)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"decay Λb ⟶ Jψ p K","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"constants = Dict(\"mJψ\" => 3.09, \"mp\" => 0.938, \"mK\" => 0.49367, \"mLb\" => 5.62) # masses of the particles","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"ThreeBodySystem creates an immutable structure that describes the setup. Two work with particles with non-integer spin, the doubled quantum numbers are stored.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"ms = ThreeBodyMasses(   # masses m1,m2,m3,m0\n    constants[\"mJψ\"],\n    constants[\"mp\"],\n    constants[\"mK\"];\n    m0 = constants[\"mLb\"],\n)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"create two-body system","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"tbs = ThreeBodySystem(; ms, two_js = ThreeBodySpins(2, 1, 0; two_h0 = 1)) # twice spin\n\nConserving = ThreeBodyParities('-', '+', '-'; P0 = '+')\nViolating = ThreeBodyParities('-', '+', '-'; P0 = '-')","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"the invariant variables, σs = [σ₁,σ₂,σ₃],\nhelicities two_λs = [λ₁,λ₂,λ₃,λ₀]\nand complex couplings cs = [c₁,c₂,...]","category":"page"},{"location":"10-tutorial/#Decay-chains","page":"Tutorial","title":"Decay chains","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"The following code creates six possible decay channels.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"The lineshape of the intermediate resonances is specified by the second argument. It is a simple Breit-Wigner function in this example.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"struct BW\n    m::Float64\n    Γ::Float64\nend\n(bw::BW)(σ::Number) = 1 / (bw.m^2 - σ - 1im * bw.m * bw.Γ)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"chains-1, i.e. (2+3): Λs with the lowest ls, LS","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Λ1520 = DecayChainLS(\n    k = 1,\n    Xlineshape = BW(1.5195, 0.0156),\n    jp = jp\"3/2+\",\n    Ps = Conserving,\n    tbs = tbs,\n)\nΛ1690 = DecayChainLS(\n    k = 1,\n    Xlineshape = BW(1.685, 0.050),\n    jp = jp\"1/2+\",\n    Ps = Conserving,\n    tbs = tbs,\n)\nΛ1810 = DecayChainLS(\n    k = 1,\n    Xlineshape = BW(1.80, 0.090),\n    jp = jp\"5/2+\",\n    Ps = Conserving,\n    tbs = tbs,\n)\nΛs = (Λ1520, Λ1690, Λ1810);\nnothing #hide","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"chains-3, i.e. (1+2): Pentaquarks with the lowest ls, LS","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Pc4312 = DecayChainLS(\n    k = 3,\n    Xlineshape = BW(4.312, 0.015),\n    jp = jp\"1/2+\",\n    Ps = Conserving,\n    tbs = tbs,\n)\nPc4440 = DecayChainLS(\n    k = 3,\n    Xlineshape = BW(4.440, 0.010),\n    jp = jp\"1/2+\",\n    Ps = Conserving,\n    tbs = tbs,\n)\nPc4457 = DecayChainLS(\n    k = 3,\n    Xlineshape = BW(4.457, 0.020),\n    jp = jp\"3/2+\",\n    Ps = Conserving,\n    tbs = tbs,\n)\nPcs = (Pc4312, Pc4440, Pc4457);\nnothing #hide","category":"page"},{"location":"10-tutorial/#Unpolarized-intensity","page":"Tutorial","title":"Unpolarized intensity","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"The full model is the vector of decay chains, and couplings for each decay chain.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"const model = ThreeBodyDecay(\n    [\"Λ1520\", \"Λ1690\", \"Λ1810\", \"Pc4312\", \"Pc4440\", \"Pc4457\"] .=> zip(\n        [2, 2.1, 1.4im, 0.4, 0.3im, -0.8im],\n        [Λ1520, Λ1690, Λ1810, Pc4312, Pc4440, Pc4457],\n    ),\n)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"just a random point of the Dalitz Plot","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"σs = randomPoint(tbs.ms)\ntwo_λs = randomPoint(tbs.two_js)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"Model is build, one can compute unpolarized intensity with it","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"@show amplitude(model, σs, two_λs)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"gives a real number - probability","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"@show unpolarized_intensity(model, σs)","category":"page"},{"location":"10-tutorial/#Plotting-API","page":"Tutorial","title":"Plotting API","text":"","category":"section"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"A natural way to visualize the three-body decay with two degrees of freedom is a correlation plot of the subchannel invariant masses squared. Kinematic limits can visualized using the border function. Plot in the σ₁σ₃ variables is obtained by","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"plot(\n    lab = \"\",\n    grid = false,\n    size = (600, 300),\n    plot(border31(masses(model)), xlab = \"σ₁ (GeV²)\", ylab = \"σ₃ (GeV²)\"),\n    plot(border12(masses(model)), xlab = \"σ₂ (GeV²)\", ylab = \"σ₁ (GeV²)\"),\n)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"The matrix element as a function of the kinematic variables can be visualized by passing an amplitude function and the kinematic mass object.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"plot(masses(model), σs -> abs2(amplitude(Pc4312, σs, (2, -1, 0, 1))))\nplot(masses(model), Base.Fix1(unpolarized_intensity, model); iσx = 1, iσy = 3)","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"The projections of the Dalitz Plot can be computed numerically using integration routine, e.g. QuadGK.","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"plot(4.2, 4.6) do e1\n    I = Base.Fix1(unpolarized_intensity, model)\n    e1 * quadgk(projection_integrand(I, masses(model), e1^2; k = 3), 0, 1)[1]\nend","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"","category":"page"},{"location":"10-tutorial/","page":"Tutorial","title":"Tutorial","text":"This page was generated using Literate.jl.","category":"page"},{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/mmikhasenko/ThreeBodyDecays.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a RP to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/mmikhasenko/ThreeBodyDecays.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Modules = [ThreeBodyDecays]","category":"page"},{"location":"95-reference/#ThreeBodyDecays.AbstractWignerRotation","page":"Reference","title":"ThreeBodyDecays.AbstractWignerRotation","text":"AbstractWignerRotation\n\nAbstract type for representing Wigner rotations in three-body decays. Subtypes include TrivialWignerRotation and WignerRotation{N} for N = 0,2,3.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.DalitzPlot","page":"Reference","title":"ThreeBodyDecays.DalitzPlot","text":"DalitzPlot # only for documentation, see example below\nplot(intensity, ms)\nplot(ms, intensity)\n\nA plotting recipe for DalitzPlot.\n\nThis recipe generates a Dalitz plot as a heatmap, visualizing the intensity of a function over a specified range of invariants. The plot provides insights into the kinematic regions of a three-body decay or similar processes.\n\nParameters:\n\nintensity::Function: A real function of the invariants, (m23², m31², m12²), returning the intensity at a given kinematic point.\nms::MassTuple: A tuple representing the masses of the particles involved in the system.\n\nKeyword Arguments:\n\niσx: Index of the first invariant to use for the x-axis, 1->m23², 2->m31², and 3->m12². Defaults to 1.\niσy: Index of the second invariant to use for the y-axis. Defaults to 2.\ngrid_size: The resolution of the plot grid. Higher values result in finer detail. Defaults to 100.\nxlims: Limits for the x-axis in terms of the invariant range. Defaults to lims(iσx, ms) (calculated automatically).\nylims: Limits for the y-axis in terms of the invariant range. Defaults to lims(iσy, ms) (calculated automatically).\n\nOutput:\n\nThe recipe generates:\n\nA grid of invariant values for σx and σy axes.\nA 2D array of values, where each element is either:\nNaN if the corresponding kinematic region is forbidden by the Kibble condition.\nThe intensity calculated from the provided intensity function.\n\nUsage:\n\nJust call a plot command,\n\nplot(intensity, ms)\nplot(ms, intensity)\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.DalitzPlotPoint","page":"Reference","title":"ThreeBodyDecays.DalitzPlotPoint","text":"DalitzPlotPoint{I, S}\n\nA structure representing a point in the Dalitz plot.\n\nFields\n\nσs::I: Mandelstam variables\ntwo_λs::S: Spin configuration\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.MandelstamTuple","page":"Reference","title":"ThreeBodyDecays.MandelstamTuple","text":"MandelstamTuple{T}\n\nA named tuple representing Mandelstam variables (; σ1, σ2, σ3) for a three-body system.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.MassTuple","page":"Reference","title":"ThreeBodyDecays.MassTuple","text":"MassTuple{T}\n\nA named tuple representing the masses of a three-body system. Contains masses m₁, m₂, m₃ of the decay products and m₀ of the parent particle.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.ParityTuple","page":"Reference","title":"ThreeBodyDecays.ParityTuple","text":"ParityTuple\n\nA named tuple representing parities of a three-body system. Contains parities P₁, P₂, P₃ of the decay products and P₀ of the parent particle.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.SpinParity","page":"Reference","title":"ThreeBodyDecays.SpinParity","text":"SpinParity\n\nA structure representing spin and parity of a particle.\n\nFields\n\ntwo_j::Int: Twice the spin value\np::Char: Parity ('+' or '-')\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.SpinTuple","page":"Reference","title":"ThreeBodyDecays.SpinTuple","text":"SpinTuple\n\nA named tuple representing the spins of a three-body system. Contains twice the helicities of the particles (2h₁, 2h₂, 2h₃, 2h₀).\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.ThreeBodyDecay-Tuple{Any}","page":"Reference","title":"ThreeBodyDecays.ThreeBodyDecay","text":"ThreeBodyDecay(descriptor)\n\nConstructs a ThreeBodyDecay object using one argument, a descriptor. The descriptor is a list of pairs, names .=> zip(couplings, chains).\n\nExamples\n\nThreeBodyDecay(\"K892\" .=> zip([1.0, -1.0, 0.2im], [chain1, chain2, chain3]))\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ThreeBodyDecay-Union{Tuple{S}, Tuple{L}, Tuple{T}, Tuple{Vector{T}, Vector{L}, Vector{S}}} where {T<:AbstractDecayChain, L<:Number, S<:AbstractString}","page":"Reference","title":"ThreeBodyDecays.ThreeBodyDecay","text":"ThreeBodyDecay(; chains, couplings, names)\n\nConstructs a ThreeBodyDecay object with the given parameters.\n\nArguments\n\nchains: An array of chains involved in the decay. The length of this array should match the lengths of couplings and names.\ncouplings: An array of coupling constants for each chain in the decay. The length of this array should match the lengths of chains and names.\nnames: An array of names for each chain, or names of resonances in the decay. The length of this array should match the lengths of chains and couplings.\n\nReturns\n\nA ThreeBodyDecay object with the specified chains, couplings, and names.\n\nExamples\n\nThreeBodyDecay(\nchains=[chain1, chain2, chain3],\ncouplings=[1.0, -1.0, 0.2im],\nnames=[\"L1405\", \"L1405\", \"K892\"])\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ThreeBodySystem","page":"Reference","title":"ThreeBodyDecays.ThreeBodySystem","text":"ThreeBodySystem{T,K}\n\nA structure representing a three-body system with masses and spins.\n\nFields\n\nms::T: Masses of the system (MassTuple)\ntwo_js::K: Spins of the system (SpinTuple)\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.TrivialWignerRotation","page":"Reference","title":"ThreeBodyDecays.TrivialWignerRotation","text":"TrivialWignerRotation <: AbstractWignerRotation\n\nRepresents a trivial Wigner rotation (identity transformation). Used when the reference frame and system frame are the same.\n\nFields\n\nk::Int: Index of the spectator particle\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.WignerRotation","page":"Reference","title":"ThreeBodyDecays.WignerRotation","text":"WignerRotation{N} <: AbstractWignerRotation\n\nRepresents a Wigner rotation in three-body decays. The type parameter N determines the kind of rotation:\n\nN=0: Rotation between total system frames\nN=2: Rotation involving two distinct indices\nN=3: Rotation involving three distinct indices\n\nFields\n\nk::Int: Index of the spectator particle\nispositive::Bool: Direction of rotation\niseven::Bool: Parity of the rotation\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#ThreeBodyDecays.minusone","page":"Reference","title":"ThreeBodyDecays.minusone","text":"struct minusone\n@x_str(s::String)\n\nA utility type and macro for handling -1 powers in calculations. The macro creates a minusone instance that returns -1 when raised to odd powers and 1 when raised to even powers.\n\nExample\n\nx\"-1\"^3  # returns -1\nx\"-1\"^2  # returns 1\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#Base.vcat-Tuple{Vararg{ThreeBodyDecay}}","page":"Reference","title":"Base.vcat","text":"Base.vcat(models::ThreeBodyDecay...)\n\nConcatenates multiple ThreeBodyDecay objects into a single ThreeBodyDecay. Argument is variable number of ThreeBodyDecay objects.\n\nAn example\n\nextended_model = vcat(model[2], model[2:3], model)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.:⊗-Tuple{Char, Char}","page":"Reference","title":"ThreeBodyDecays.:⊗","text":"⊗(p1::Char, p2::Char)\n⊗(jp1::SpinParity, jp2::SpinParity)\n\nCompute the tensor product of two parities or spin-parity states.\n\nArguments\n\np1, p2: Parity characters ('+' or '-')\njp1, jp2: SpinParity objects\n\nReturns\n\nFor parities: The combined parity\nFor spin-parity: Array of possible combined states\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.DecayChainLS-Tuple{}","page":"Reference","title":"ThreeBodyDecays.DecayChainLS","text":"DecayChainLS(; k, Xlineshape, jp, Ps, tbs)\n\nConstructs a decay chain with the smallest spin-orbit coupling.\n\nArguments\n\nk: Index of the spectator particle.\nXlineshape: Lambda function for the lineshape of the resonance.\njp: Spin-parity of the resonance (e.g., jp = \"1/2-\").\nPs: Parities of the three-body system (e.g., Ps = ThreeBodyParities('+','+','+'; P0='+')).\ntbs: Three-body system structure.\n\nExample\n\n```julia DecayChainLS(     k = 1,     Xlineshape = x -> 1 / (x - 1im),     jp = \"1/2-\",     Ps = ThreeBodyParities('+', '+', '+'; P0 = '+'),     tbs = ThreeBodySystem(1.0, 2.0, 3.0; m0 = 4.0) )\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.DecayChainsLS-Tuple{}","page":"Reference","title":"ThreeBodyDecays.DecayChainsLS","text":"DecayChainsLS(; k, Xlineshape, jp, Ps, tbs)\n\nGenerate decay chains with all possible couplings based on the specified parameters.\n\nArguments\n\nk: index of spectator that specifies the decay chain.\nXlineshape: Lambda function for the lineshape of the resonance.\njp: Spin-parity quantum numbers of the resonance (e.g., jp = \"1/2-\").\nPs: Parity quantum numbers of the three-body system (e.g., Ps = ThreeBodyParities('+','+','+'; P0='+')).\ntbs: Three-body-system structure that defines the involved particles and their properties.\n\nReturns\n\nAn array of DecayChain objects representing all possible couplings for the given decay configuration.\n\nNotes\n\nThe function computes the possible coupling combinations (ls x LS). For each combination, a DecayChain object is created with the appropriate recoupling terms (Hij, HRk).\n\nExample\n\n```julia DecayChainsLS(     k=3, Xlineshape=σ->1.0, jp=\"1/2-\", Ps=ThreeBodyParities('+','+','+'; P0='+'),     tbs=ThreeBodySystem(         ThreeBodyMasses(1, 2, 3; m0=7.0),         ThreeBodySpins(1, 2, 0; h0=3)     ) )\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.Invariants-Union{Tuple{@NamedTuple{m1::T, m2::T, m3::T, m0::T}}, Tuple{T}} where T","page":"Reference","title":"ThreeBodyDecays.Invariants","text":"Invariants(ms::MassTuple{T}; σ1, σ2, σ3)\n\nConstruct a tuple of Mandelstam invariants from given invariants and the mass tuple.\n\nArguments\n\nms::MassTuple{T}: Masses of the system\nσ1, σ2, σ3: Optional invariants (two or three must be provided)\n\nReturns\n\nMandelstamTuple{T}: The complete set of invariants\n\nThrows\n\nErrorException if not exactly two or three invariants are provided\nErrorException if the invariants violate mass constraints\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.Kallen-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.Kallen","text":"Kallen(x, y, z)\n\nCalculate the Källén function λ(x,y,z) = x² + y² + z² - 2xy - 2yz - 2zx. This function appears frequently in relativistic kinematics calculations.\n\nArguments\n\nx, y, z: Real numbers or complex values\n\nReturns\n\nThe value of the Källén function\n\nExamples\n\njulia> Kallen(10.0, 1.0, 1.0)  # For a decay A -> B + C, calculate λ(mA², mB², mC²)\n60.0\n\njulia> Kallen(5.0, 1.0, 1.0)  # Another example with different masses\n5.0\n\nSee also sqrtKallenFact, Kibble.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.Kibble-Tuple{Any, Any}","page":"Reference","title":"ThreeBodyDecays.Kibble","text":"Kibble(σs, msq)\n\nCalculate the Kibble function φ(σ₁,σ₂,σ₃) for three-body decays, which is defined in terms of Källén functions. The Kibble function determines the physical boundaries of the three-body phase space.\n\nThe function is calculated as: φ(σ₁,σ₂,σ₃) = λ(λ₁,λ₂,λ₃) where λᵢ = λ(M², mᵢ², σᵢ) are Källén functions of the total mass squared M², the i-th particle mass squared mᵢ², and the corresponding Mandelstam variable σᵢ.\n\nArguments\n\nσs: Tuple of Mandelstam variables (σ₁,σ₂,σ₃)\nmsq: Tuple of squared masses (m₁²,m₂²,m₃²,M²)\n\nReturns\n\nValue of the Kibble function\n\nExamples\n\njulia> msq = (1.0, 1.0, 1.0, 16.0);  # squared masses: m₁², m₂², m₃², M²\n\njulia> σs = (2.0, 2.0, 2.0);         # Mandelstam variables\n\njulia> Kibble(σs, msq)               # returns the Kibble function value\n-77763.0\n\njulia> Kibble(σs, msq) < 0           # physical configuration if negative\ntrue\n\nSee also Kallen, isphysical.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ThreeBodyMasses-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.ThreeBodyMasses","text":"ThreeBodyMasses(m1, m2, m3; m0)\nThreeBodyMasses(; m1, m2, m3, m0)\n\nConstruct a MassTuple for a three-body system.\n\nArguments\n\nm1, m2, m3: Masses of the decay products\nm0: Mass of the parent particle\n\nReturns\n\nMassTuple{T}: A named tuple containing the masses\n\nThrows\n\nErrorException if m₀ is less than the sum of m₁, m₂, and m₃\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ThreeBodyParities-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.ThreeBodyParities","text":"ThreeBodyParities(P1, P2, P3; P0)\n\nConstruct a ParityTuple for a three-body system.\n\nArguments\n\nP1, P2, P3: Parities of the decay products\nP0: Parity of the parent particle\n\nReturns\n\nParityTuple: A named tuple containing the parities\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ThreeBodySpinParities-Tuple{SpinParity, SpinParity, SpinParity}","page":"Reference","title":"ThreeBodyDecays.ThreeBodySpinParities","text":"ThreeBodySpinParities(jp1, jp2, jp3; jp0)\n\nConstruct spin and parity information for a three-body system using shortcuts like \"x/2±\", or jp\"x/2±\".\n\nArguments\n\njp1, jp2, jp3: SpinParity objects for decay products\njp0: SpinParity object for parent particle\n\nReturns\n\nTuple{SpinTuple,ParityTuple}: Tuple of spin structure and parity structure\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ThreeBodySpins-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.ThreeBodySpins","text":"ThreeBodySpins(two_h1_or_h1, two_h2_or_h2, two_h3_or_h3; h0=nothing, two_h0=nothing)\n\nConstruct a SpinTuple for a three-body system. Depending on the key arguments, h0 or two_h0, the position arguments can be either twice the helicity or helicity itself.\n\nArguments\n\ntwo_h1_or_h1: Twice the helicity or helicity of first particle\ntwo_h2_or_h2: Twice the helicity or helicity of second particle\ntwo_h3_or_h3: Twice the helicity or helicity of third particle\nh0: Key argument for helicity of parent particle (optional)\ntwo_h0: Key argument for twice the helicity of parent particle (optional)\n\nReturns\n\nSpinTuple: A named tuple containing the spins\n\nThrows\n\nErrorException if neither h0 nor two_h0 is provided\nErrorException if baryon number is not conserved\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.aligned_four_vectors-Tuple{Any, Any}","page":"Reference","title":"ThreeBodyDecays.aligned_four_vectors","text":"aligned_four_vectors(σs,ms; k::Int)\n\nComputes the four-momenta of the three particles in the center of momentum frame aligning the k-th particle with the -z-axis.\n\nArguments\n\nσs: Tuple of mandelstam variables,\nms: Tuple of masses in the order m1, m2, m3, m0.\nk: Index of the particle to be aligned with the -z-axis.\n\nReturns\n\nA tuple of three four-momenta in the form of (px, py, pz, E).\n\nExamples\n\njulia> ms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0);\n\njulia> σs = x2σs([0.5, 0.5], ms; k=2);\n\njulia> p1, p2, p3 = aligned_four_vectors(σs, ms; k=1);\n\njulia> p1[3] ≈ -breakup_Rk(σs[1], ms; k=1)  # first particle aligned with -z axis\ntrue\n\njulia> all(p -> abs(p[2]) < 1e-10, (p1, p2, p3))  # all momenta in x-z plane\ntrue\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.amplitude-Tuple{DecayChain, @NamedTuple{α::T, cosβ::T, γ::T} where T<:Real, @NamedTuple{σ1::T, σ2::T, σ3::T} where T}","page":"Reference","title":"ThreeBodyDecays.amplitude","text":"amplitude(dc::DecayChain, orientation_angles::PlaneOrientation, σs::MandelstamTuple; kw...)\n\nCompute the amplitude for a given decay chain with orientation angles applied to the rotation of the final state.\n\nArguments\n\ndc::DecayChain: The decay chain object containing the system's configuration (e.g., spin, parity, etc.).\norientation_angles::PlaneOrientation: Named tuple representing the plane orientation angles (α, cosβ, γ) for the final state.\nσs::MandelstamTuple: Tuple representing the Mandelstam variables that describe the kinematic invariants of the process.\nkw...: Additional keyword arguments to be passed to the underlying amplitude calculation (e.g refζs reference kinematics).\n\nReturns\n\nA four dimensional amplitude array\n\nDetails\n\nThe function first computes the array of aligned amplitudes. Then it contract it with a Wigner D-matrix.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.amplitude-Tuple{DecayChain, @NamedTuple{σ1::T, σ2::T, σ3::T} where T, Any}","page":"Reference","title":"ThreeBodyDecays.amplitude","text":"amplitude(dc::DecayChain, σs::MandelstamTuple, two_λs; refζs = (1, 2, 3, 1))\n\nCompute the total amplitude for a given decay chain and kinematic configuration.\n\nArguments\n\ndc::DecayChain: The decay-chain object.\nσs::MandelstamTuple: Tuple representing Mandelstam variables that describe the kinematic invariants of the process.\ntwo_λs: A collection of helicity values for the particles involved in the decay.\nrefζs: Reference ζ indices for alignment rotations (default is (1, 2, 3, 1)).\n\nReturns\n\nA four-dimensional array of amplitude values.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.amplitude-Tuple{DecayChain, @NamedTuple{σ1::T, σ2::T, σ3::T} where T}","page":"Reference","title":"ThreeBodyDecays.amplitude","text":"amplitude(dc::DecayChain, σs::MandelstamTuple, two_λs; refζs = (1, 2, 3, 1))\n\nCompute the total amplitude for a given decay chain, kinematic configuration, and all possible helicity values.\n\nArguments\n\ndc::DecayChain: The decay-chain object.\nσs::MandelstamTuple: Tuple representing Mandelstam variables that describe the kinematic invariants of the process.\nrefζs: Reference ζ indices for alignment rotations (default is (1, 2, 3, 1)).\n\nReturns\n\nA four-dimensional array of amplitude values.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.border-Union{Tuple{@NamedTuple{m1::T, m2::T, m3::T, m0::T}}, Tuple{T}} where T","page":"Reference","title":"ThreeBodyDecays.border","text":"border(ms::MassTuple{T}; Nx::Int=300) where T\n\nCalculate the border of the Dalitz plot.\n\nArguments\n\nms::MassTuple{T}: Masses of the system\nNx::Int: Number of points to generate\n\nReturns\n\nVector{MandelstamTuple{T}}: Points on the border\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.breakup-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.breakup","text":"breakup(m, m1, m2)\nbreakup_Rk(σk, ms; k)\nbreakup_ij(σk, ms; k)\n\nCalculate the breakup momentum for a two-body system.\n\nbreakup: General form for any two-body decay\nbreakup_Rk: For decay of the total system into a subsystem (ij), and a particle k\nbreakup_ij: For decay of the subsystem (ij) into particles i and j\n\nArguments\n\nm: Mass of the decaying system\nm1, m2: Masses of the decay products\nσk: Invariant mass squared of the isobar\nms: MassTuple containing all masses\nk: Spectator index\n\nReturns\n\nBreak-up momentum magnitude\n\nExamples\n\njulia> ms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0);\n\njulia> p = breakup_Rk(2.5^2, ms; k=1)\n0.897587913521567\n\njulia> q = breakup_ij(2.5^2, ms; k=1)\n0.75\n\njulia> breakup(4.0, 2.5, 1.0)  # direct use of breakup function\n0.897587913521567\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.cosζ-Tuple{TrivialWignerRotation, Any, Any}","page":"Reference","title":"ThreeBodyDecays.cosζ","text":"cosζ(wr::AbstractWignerRotation, σs, msq)\n\nCalculate the cosine of the Wigner rotation angle ζ for a given kinematic configuration. Different methods are implemented for different types of Wigner rotations.\n\nArguments\n\nwr: A Wigner rotation object\nσs: Tuple of Mandelstam variables\nmsq: Tuple of squared masses\n\nReturns\n\nCosine of the Wigner rotation angle\n\nExample\n\nms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0)\nσs = x2σs([0.5, 0.5], ms; k=1)\nw = wr(2, 1, 1)\ncosζ(w, σs, ms^2)  # Get rotation angle cosine\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.cosθij-Tuple{Any, Any}","page":"Reference","title":"ThreeBodyDecays.cosθij","text":"cosθij(k,σs,msq)\n\nIsobar decay angle for the chain-k, i.e. an angle of between vectors pi and -pk in the (ij) rest frame.\n\nExplicit forms: cosθ23, cosθ31, cosθ12.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ijk-Tuple{Int64}","page":"Reference","title":"ThreeBodyDecays.ijk","text":"ijk(k::Int)\nij_from_k(k::Int)\n\nReturn a tuple of indices (i,j,k) for a three-body system, where i,j are ordered cyclically from k. Used extensively in three-body decay calculations to determine the spectator particle (k) and the pair (i,j).\n\nArguments\n\nk::Int: Index of the spectator particle (1, 2, or 3)\n\nReturns\n\nTuple{Int,Int,Int}: A tuple of indices (i,j,k) where i,j are ordered cyclically from k\n\nExample\n\nijk(1) # returns (2, 3, 1)\nijk(2) # returns (3, 1, 2)\nijk(3) # returns (1, 2, 3)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.isphysical-Tuple{Any, @NamedTuple{m1::T, m2::T, m3::T, m0::T} where T}","page":"Reference","title":"ThreeBodyDecays.isphysical","text":"isphysical(σs::MandelstamTuple, ms::MassTuple) -> Bool\ninphrange(σs::MandelstamTuple, ms::MassTuple) -> Bool\ninrange(x, r) -> Bool\n\nCheck if a set of Mandelstam variables represents a physically valid configuration in the three-body phase space. A configuration is physical if:\n\nThe Kibble function is negative (φ(σ₁,σ₂,σ₃) < 0)\nAll Mandelstam variables are within their kinematically allowed ranges\n\nArguments\n\nσs::MandelstamTuple: Tuple of Mandelstam variables (σ₁,σ₂,σ₃)\nms::MassTuple: Tuple of masses (m₁,m₂,m₃,M)\nx: Value to check (for inrange)\nr: Range tuple (min,max) to check against (for inrange)\n\nReturns\n\nBool: true if the configuration is physical, false otherwise\n\nExamples\n\njulia> ms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0);\n\njulia> σs = (6.25, 6.25, 6.5);\n\njulia> isphysical(σs, ms)  # checks if this configuration is physically possible\ntrue\n\njulia> σs_unphysical = (20.0, 20.0, 20.0);  # values outside allowed ranges\n\njulia> isphysical(σs_unphysical, ms)  # this configuration is not physical\nfalse\n\nSee also Kibble, lims.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.ispositive-Tuple{TrivialWignerRotation}","page":"Reference","title":"ThreeBodyDecays.ispositive","text":"ispositive(wr::AbstractWignerRotation)\n\nDetermine if a Wigner rotation is in the positive direction.\n\nArguments\n\nwr: A Wigner rotation object\n\nReturns\n\ntrue for positive rotations, false otherwise\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.jls_coupling-NTuple{7, Any}","page":"Reference","title":"ThreeBodyDecays.jls_coupling","text":"jls_coupling(two_j1, two_λ1, two_j2, two_λ2, two_j, two_l, two_s)\n\nCalculate the LS-coupling coefficient for two particles coupling to total angular momentum j. Uses Clebsch-Gordan coefficients to compute the coupling of orbital angular momentum l and total spin s to total j, with specified helicities.\n\nArguments\n\ntwo_j1, two_j2: Twice the spins of the particles\ntwo_λ1, two_λ2: Twice the helicities\ntwo_j: Twice the total angular momentum\ntwo_l: Twice the orbital angular momentum\ntwo_s: Twice the total spin\n\nReturns\n\nThe coupling coefficient value\n\nExample\n\n# For j₁=1/2, λ₁=1/2, j₂=1/2, λ₂=-1/2, j=1, l=1, s=1\njulia> ThreeBodyDecays.jls_coupling(1, 1, 1, -1, 2, 2, 2)\n-0.7071067811865477\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.letterL-Tuple{Int64}","page":"Reference","title":"ThreeBodyDecays.letterL","text":"letterL(l::Int)\nletterL(l::String)\n\nConvert an angular momentum quantum number to its spectroscopic notation. For l = 0,1,2,3,4,5 returns S,P,D,F,G,H respectively. For l ≥ 6 returns the first character of the string representation.\n\nArguments\n\nl: Angular momentum quantum number (as Int or String)\n\nReturns\n\nChar: The spectroscopic notation for the given angular momentum\n\nExample\n\nletterL(0)  # returns 'S'\nletterL(1)  # returns 'P'\nletterL(\"2\")  # returns 'D'\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.lims-Tuple{@NamedTuple{m1::T, m2::T, m3::T, m0::T} where T}","page":"Reference","title":"ThreeBodyDecays.lims","text":"lims(ms::MassTuple; k::Int)\nlims(k::Int, ms::MassTuple)\nlims1(ms::MassTuple)\nlims2(ms::MassTuple)\nlims3(ms::MassTuple)\n\nCalculate the kinematic limits (boundaries) for the Mandelstam variables σᵢ in a three-body decay. For each pair of particles (i,j), the invariant mass squared σₖ = (pᵢ + pⱼ)² must lie within physical limits:\n\nLower bound: (mᵢ + mⱼ)² (threshold for producing particles i and j)\nUpper bound: (M - mₖ)² (maximum energy available when particle k recoils)\n\nArguments\n\nms: Tuple of masses (m₁,m₂,m₃,M)\nk: Index specifying which pair of particles (1,2,3)\n\nReturns\n\nTuple (min,max) of the allowed range for σₖ\n\nExample\n\nms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0)\nlims1(ms)  # limits for σ₁ = (p₂ + p₃)²\nlims2(ms)  # limits for σ₂ = (p₃ + p₁)²\nlims3(ms)  # limits for σ₃ = (p₁ + p₂)²\n\nSee also isphysical, Kibble.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.phase-Tuple{Any}","page":"Reference","title":"ThreeBodyDecays.phase","text":"Phase for wigner d-functions for clockwise rotations\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.phase_space_integrand-Tuple{Any, Any}","page":"Reference","title":"ThreeBodyDecays.phase_space_integrand","text":"phase_space_integrand(function_σs, ms; k::Int)\n\nCalculate the phase space integrand for a given function function_σs, and mass tuple ms. The key argument k specifies the mapping: σk->[0,1], zk->[0,1]. It returns an integrand function of x, x ∈ [0,1]x[0,1] domain to pass to a numerical integrator.\n\nArguments\n\nfunction_σs: A function that takes a MandelstamTuple and returns a scalar.\nms: A scalar representing the mass.\nk: An integer representing the mapping index.\n\nUsage\n\nintegrand = phase_space_integrand(function_σs, ms; k)\n\nSee also\n\nx2σs\nprojection_integrand\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.polardalitz2invariants-Tuple{Any, Tuple}","page":"Reference","title":"ThreeBodyDecays.polardalitz2invariants","text":"polardalitz2invariants(θ, expansion_point)\n\nFor given polar angle θ, returns an (σ1,σ2,σ3) Tuple of polynomials of radius r(θ) around the expansion point. The polynomial works as a function of the r coordinate.\n\nArguments\n\nθ: Polar angle\nexpansion_point: Tuple of expansion point coordinates\n\nReturns\n\nTuple{Polynomial,Polynomial,Polynomial}: Polynomials for each invariant\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.possible_l_s_L_S-Tuple{SpinParity, @NamedTuple{two_h1::Int64, two_h2::Int64, two_h3::Int64, two_h0::Int64}, @NamedTuple{P1::Char, P2::Char, P3::Char, P0::Char}}","page":"Reference","title":"ThreeBodyDecays.possible_l_s_L_S","text":"possible_l_s_L_S(jp::SpinParity, two_js::SpinTuple, Ps::ParityTuple; k)\n\nConvert the output of possible_lsLS to a more readable format with half-integer values.\n\nArguments\n\nSame as possible_lsLS\n\nReturns\n\nVector of named tuples containing (l,s,L,S) as strings representing half-integer values\n\nExample\n\nms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0)\ntwo_js = ThreeBodySpins(1, 1, 0; h0=2)\nPs = ThreeBodyParities('+','+','+'; P0='-')\nqn = possible_l_s_L_S(jp\"1-\", two_js, Ps; k=1)\n# Each element has fields like qn[1].l == \"0\", qn[1].s == \"1/2\", etc.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.possible_ls-Tuple{SpinParity, SpinParity}","page":"Reference","title":"ThreeBodyDecays.possible_ls","text":"possible_ls(jp1::SpinParity, jp2::SpinParity; jp::SpinParity)\npossible_ls_ij(jp::SpinParity, two_js::SpinTuple, Ps::ParityTuple; k::Int)\npossible_ls_Rk(jp::SpinParity, two_js::SpinTuple, Ps::ParityTuple; k::Int)\n\nCalculate possible orbital angular momentum (l) and spin (s) combinations for a two-body system.\n\npossible_ls: For any two particles with given spin-parities\npossible_ls_ij: For the (i,j) pair in a three-body decay\npossible_ls_Rk: For the resonance-spectator system\n\nArguments\n\njp1, jp2: Spin-parity quantum numbers of the particles\njp: Total spin-parity of the system\ntwo_js: Spins of all particles in the system\nPs: Parities of all particles\nk: Spectator index\n\nReturns\n\nVector of tuples (l,s) containing allowed combinations\n\nExample\n\n# For a decay 1⁻ → 1/2⁺ + 1/2⁺\nls = possible_ls(jp\"1/2+\", jp\"1/2+\"; jp=jp\"1-\")\n# For a three-body system\nms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0)\ntwo_js = ThreeBodySpins(1, 1, 0; h0=2)\nPs = ThreeBodyParities('+','+','+'; P0='-')\nls_ij = possible_ls_ij(jp\"1-\", two_js, Ps; k=1)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.possible_lsLS-Tuple{SpinParity, @NamedTuple{two_h1::Int64, two_h2::Int64, two_h3::Int64, two_h0::Int64}, @NamedTuple{P1::Char, P2::Char, P3::Char, P0::Char}}","page":"Reference","title":"ThreeBodyDecays.possible_lsLS","text":"possible_lsLS(jp::SpinParity, two_js::SpinTuple, Ps::ParityTuple; k::Int)\n\nCalculate all possible combinations of orbital angular momenta and spins for both the isobar decay (l,s) and the total system decay (L,S).\n\nArguments\n\njp: Spin-parity of the resonance\ntwo_js: Spins of all particles\nPs: Parities of all particles\nk: Spectator index\n\nReturns\n\nVector of named tuples containing with all possible (twols, twoLS) combinations\n\nExample\n\nms = ThreeBodyMasses(1.0, 1.0, 1.0; m0=4.0)\ntwo_js = ThreeBodySpins(1, 1, 0; h0=2)\nPs = ThreeBodyParities('+','+','+'; P0='-')\nlsLS = possible_lsLS(jp\"1-\", two_js, Ps; k=1)\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.project_cosθij_intergand-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.project_cosθij_intergand","text":"project_cosθij_intergand(fs, ms, z; k)\n\nCalculate the integrand for projecting onto cos(θij) for a given function fs, mass tuple ms, and cosine value z, with k specifying the spectator. Returns an integrand function of x ∈ [0,1] to pass to a numerical integrator.\n\nArguments\n\nfs: A function that takes a MandelstamTuple and returns a scalar.\nms: A MassTuple containing the masses.\nz: The cosine value to project onto.\nk: The spectator index.\n\nReturns\n\nAn integrand function for numerical integration.\n\nExample\n\nlet Nb = 100\n    [sum(range(-1, 1, Nb)) do z\n        integrand = project_cosθij_intergand(I, ms, z; k)\n        quadgk(integrand, 0, 1)[1] * 2/Nb\n    end for k in 1:3]\nend\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.projection_integrand-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.projection_integrand","text":"projectionintegrand(functionσs, ms, σk; k)\n\nCalculate the projection integrand for a given function function_σs, mass tuple ms, and Mandelstam variable σk, with k specified by a keyword argument. It returns an integrand function of x, x ∈ [0,1] to pass to a numerical integrator.\n\nArguments\n\nfunction_σs: A function that takes a MandelstamTuple and returns a scalar.\nms: A scalar representing the mass.\nσk: A scalar representing the Mandelstam variable.\nk: A scalar representing the momentum transfer (optional).\n\nUsage\n\nplot(4.2, 4.6) do e1\nI = Base.Fix1(unpolarized_intensity, model)\nintegrand = projection_integrand(I, masses(model), e1^2; k = 3)\ne1 * quadgk(integrand, 0, 1)[1]\nend\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.randomPoint-Tuple{@NamedTuple{m1::T, m2::T, m3::T, m0::T} where T}","page":"Reference","title":"ThreeBodyDecays.randomPoint","text":"randomPoint(ms::MassTuple)\nrandomPoint(two_js::SpinTuple)\nrandomPoint(tbs::ThreeBodySystem)\n\nGenerate a random point in the phase space.\n\nArguments\n\nms::MassTuple: Masses of the system\ntwo_js::SpinTuple: Spins of the system\ntbs::ThreeBodySystem: Complete three-body system\n\nReturns\n\nFor masses: Random Mandelstam variables\nFor spins: Random spin configuration\nFor system: Random DalitzPlotPoint\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.shift_by_half-Tuple{Any}","page":"Reference","title":"ThreeBodyDecays.shift_by_half","text":"shift_by_half(v)\n\nShift a vector of values by half the step size between elements. Used in plotting and binning operations to center values between grid points.\n\nArguments\n\nv: Vector of values\n\nReturns\n\nVector of values shifted by half the step size\n\nExample\n\nv = [1, 2, 3, 4]\nshift_by_half(v)  # returns [1.5, 2.5, 3.5]\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.sqrtKallenFact-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.sqrtKallenFact","text":"sqrtKallenFact(a, b, c)\n\nCalculate the square root of the Källén function λ(a,b,c) in factorized form. The Källén function is defined as λ(a,b,c) = a² + b² + c² - 2ab - 2bc - 2ca. This function returns √λ(a,b,c) in a factorized form to improve numerical stability: √(a-(b+c)) √(a-(b-c)) √(a+(b+c)) √(a+(b-c)).\n\nArguments\n\na, b, c: Input values for the Källén function\n\nReturns\n\nSquare root of the Källén function in factorized form\n\nExamples\n\njulia> sqrtKallenFact(10.0, 1.0, 1.0)  # √λ(10,1,1) = √9600\n97.97958971132714\n\njulia> sqrtKallenFact(4.0, 1.0, 1.0)  # √λ(4,1,1) = √192\n13.856406460551018\n\nSee also Kallen, Kibble.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.str2jp-Tuple{AbstractString}","page":"Reference","title":"ThreeBodyDecays.str2jp","text":"str2jp(pin::AbstractString)\n\nConvert a string representation of spin-parity to a SpinParity object.\n\nArguments\n\npin::AbstractString: String in format \"x±\" or \"x/2±\"\n\nReturns\n\nSpinParity: The corresponding spin-parity object\n\nThrows\n\nErrorException if the string format is invalid\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.unpolarized_intensity-Tuple{Any, Any}","page":"Reference","title":"ThreeBodyDecays.unpolarized_intensity","text":"unpolarized_intensity(model::ThreeBodyDecay, σs; kw...)\n\nComputes squared amplitude summed over spin projections.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.wr","page":"Reference","title":"ThreeBodyDecays.wr","text":"wr(system_a, reference_b, particle_c=0)\n\nCreate a WignerRotation object for transforming between different reference frames in a three-body system.\n\nArguments\n\nsystem_a: Index of the isobar system being considered (1,2,3)\nreference_b: Index of the reference system (1,2,3)\nparticle_c: Index of the particle (0 for parent particle, 1,2,3 for daughters)\n\nReturns\n\nA WignerRotation object of the appropriate type\n\nExample\n\n# Rotation from system 2 to system 1 for particle 1 => zeta_21_for1\nw = wr(2, 1, 1)\n# Rotation between total system frames => zeta_12_for0\nw0 = wr(1, 2, 0)\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#ThreeBodyDecays.x2σs-Tuple{Any, @NamedTuple{m1::T, m2::T, m3::T, m0::T} where T}","page":"Reference","title":"ThreeBodyDecays.x2σs","text":"x2σs(x, ms::MassTuple; k::Int = last(findmin(Tuple(ms))))\n\nMaps a pair of variables x to a physical set of mandelstam invariants σs using a linear transformation. x[1] is mapped to σ[k], and x[2] is mapped into cosθij, that is used to compute σ[i] and σ[j]. Uniform distribution of x does not lead to the phase space distribution of σs.\n\nArguments\n\nx : a pair of numbers\nms : masses of the system as a MassTuple, see ThreeBodyMasses.\nk : the index for which the variable is not generated. By default, the function picks the coordinates where the Dalitz plot has the closest shape to the squared fitting box.\n\nReturns\n\nan instance of MandelstamTuple with the squared masses.\n\nExample\n\nThe phase space sample with 100 points can be generated as follows:\n\nσs0 = x2σs([0.3, 0.2], ms)\n\nSee also y2σs.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.y2σs-Tuple{Any, @NamedTuple{m1::T, m2::T, m3::T, m0::T} where T}","page":"Reference","title":"ThreeBodyDecays.y2σs","text":"y2σs(y, ms::MassTuple; k::Int = last(findmin(Tuple(ms))))\n\nMaps a pair of variables to the plane of squared masses using a linear transformation, by shifting and scaling y[1] to σ[i], and y[2] to σ[j]. The indices of variables are determined by the argument k. The mapping does not guarantee that values are physical, however, physical values of σs are phase-space distributed for uniform y.\n\nArguments\n\ny : a pair of numbers\nms : masses of the system as a MassTuple, see ThreeBodyMasses.\nk : the index for which the variable is not generated. By default, the function picks the coordinates\n\nwhere the Dalitz plot has the closest shape to the squared fitting box.\n\nReturns\n\nan instance of MandelstamTuple with the squared masses.\n\nExample\n\nThe phase space sample with 100 points can be generated as follows:\n\ndata = let\n    N = 100\n    # map random variables to dalitz\n    _data = mapslices(rand(N, 2); dims=2) do xy\n        y2σs(xy, ms)\n    end[:, 1]\n    # select physical\n    filter!(_data) do σs\n        isphysical(σs, ms)\n    end\n    _data\nend\n\nSee also x2σs.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.σiofk-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.σiofk","text":"σiofk(k,z,σj,msq)\n\nComputes invariant σi = (p0 - pi)² from the scattering angle z=cosθij in the rest from of (i,j), given the mass of the system m(i,j)² = σk\n\nExplicit forms: σ3of2, σ1of3, σ2of1.\n\nSee also σjofk\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#ThreeBodyDecays.σjofk-Tuple{Any, Any, Any}","page":"Reference","title":"ThreeBodyDecays.σjofk","text":"σjofk(z,σi,msq; k::Int)\n\nComputes invariant σj = (p0-pj)² from the scattering angle z=cosθij in the rest from of (i,j), given the mass of the system m(i,j)² = σk\n\nExplicit forms: σ3of1, σ1of2, σ2of3.\n\nSee also σiofk\n\n\n\n\n\n","category":"method"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"","page":"ThreeBodyDecays","title":"ThreeBodyDecays","text":"CurrentModule = ThreeBodyDecays","category":"page"},{"location":"#ThreeBodyDecays","page":"ThreeBodyDecays","title":"ThreeBodyDecays","text":"","category":"section"},{"location":"","page":"ThreeBodyDecays","title":"ThreeBodyDecays","text":"Documentation for ThreeBodyDecays.","category":"page"},{"location":"#Contributors","page":"ThreeBodyDecays","title":"Contributors","text":"","category":"section"},{"location":"","page":"ThreeBodyDecays","title":"ThreeBodyDecays","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
